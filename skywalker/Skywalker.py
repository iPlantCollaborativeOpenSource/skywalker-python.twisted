#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None

from zope.interface import Interface, implements
from twisted.internet import defer
from thrift.transport import TTwisted

class Iface(Interface):
  def get_provider_hash(provider):
    """
    Parameters:
     - provider
    """
    pass

  def get_identity_hash(identity):
    """
    Parameters:
     - identity
    """
    pass

  def get_instance(provider_hash, identity_hash, instance_uuid):
    """
    Parameters:
     - provider_hash
     - identity_hash
     - instance_uuid
    """
    pass

  def list_instances(provider_hash, identity_hash):
    """
    Parameters:
     - provider_hash
     - identity_hash
    """
    pass

  def create_instance(provider_hash, identity_hash, options):
    """
    Parameters:
     - provider_hash
     - identity_hash
     - options
    """
    pass

  def deploy_to_instance(provider_hash, identity_hash, options):
    """
    Parameters:
     - provider_hash
     - identity_hash
     - options
    """
    pass

  def destroy_instance(provider_hash, identity_hash, instance_uuid):
    """
    Parameters:
     - provider_hash
     - identity_hash
     - instance_uuid
    """
    pass


class Client:
  implements(Iface)

  def __init__(self, transport, oprot_factory):
    self._transport = transport
    self._oprot_factory = oprot_factory
    self._seqid = 0
    self._reqs = {}

  def get_provider_hash(self, provider):
    """
    Parameters:
     - provider
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_provider_hash, provider)
    d.addCallbacks(
      callback=self.cb_send_get_provider_hash,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_provider_hash,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_provider_hash(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_provider_hash(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_provider_hash(self, provider):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_provider_hash', TMessageType.CALL, self._seqid)
    args = get_provider_hash_args()
    args.provider = provider
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_provider_hash(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_provider_hash_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_provider_hash failed: unknown result"))

  def get_identity_hash(self, identity):
    """
    Parameters:
     - identity
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_identity_hash, identity)
    d.addCallbacks(
      callback=self.cb_send_get_identity_hash,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_identity_hash,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_identity_hash(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_identity_hash(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_identity_hash(self, identity):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_identity_hash', TMessageType.CALL, self._seqid)
    args = get_identity_hash_args()
    args.identity = identity
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_identity_hash(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_identity_hash_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_identity_hash failed: unknown result"))

  def get_instance(self, provider_hash, identity_hash, instance_uuid):
    """
    Parameters:
     - provider_hash
     - identity_hash
     - instance_uuid
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_get_instance, provider_hash, identity_hash, instance_uuid)
    d.addCallbacks(
      callback=self.cb_send_get_instance,
      callbackArgs=(seqid,),
      errback=self.eb_send_get_instance,
      errbackArgs=(seqid,))
    return d

  def cb_send_get_instance(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_get_instance(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_get_instance(self, provider_hash, identity_hash, instance_uuid):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('get_instance', TMessageType.CALL, self._seqid)
    args = get_instance_args()
    args.provider_hash = provider_hash
    args.identity_hash = identity_hash
    args.instance_uuid = instance_uuid
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_get_instance(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = get_instance_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "get_instance failed: unknown result"))

  def list_instances(self, provider_hash, identity_hash):
    """
    Parameters:
     - provider_hash
     - identity_hash
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_list_instances, provider_hash, identity_hash)
    d.addCallbacks(
      callback=self.cb_send_list_instances,
      callbackArgs=(seqid,),
      errback=self.eb_send_list_instances,
      errbackArgs=(seqid,))
    return d

  def cb_send_list_instances(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_list_instances(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_list_instances(self, provider_hash, identity_hash):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('list_instances', TMessageType.CALL, self._seqid)
    args = list_instances_args()
    args.provider_hash = provider_hash
    args.identity_hash = identity_hash
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_list_instances(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = list_instances_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.oex is not None:
      return d.errback(result.oex)
    if result.cex is not None:
      return d.errback(result.cex)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "list_instances failed: unknown result"))

  def create_instance(self, provider_hash, identity_hash, options):
    """
    Parameters:
     - provider_hash
     - identity_hash
     - options
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_create_instance, provider_hash, identity_hash, options)
    d.addCallbacks(
      callback=self.cb_send_create_instance,
      callbackArgs=(seqid,),
      errback=self.eb_send_create_instance,
      errbackArgs=(seqid,))
    return d

  def cb_send_create_instance(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_create_instance(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_create_instance(self, provider_hash, identity_hash, options):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('create_instance', TMessageType.CALL, self._seqid)
    args = create_instance_args()
    args.provider_hash = provider_hash
    args.identity_hash = identity_hash
    args.options = options
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_create_instance(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = create_instance_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "create_instance failed: unknown result"))

  def deploy_to_instance(self, provider_hash, identity_hash, options):
    """
    Parameters:
     - provider_hash
     - identity_hash
     - options
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_deploy_to_instance, provider_hash, identity_hash, options)
    d.addCallbacks(
      callback=self.cb_send_deploy_to_instance,
      callbackArgs=(seqid,),
      errback=self.eb_send_deploy_to_instance,
      errbackArgs=(seqid,))
    return d

  def cb_send_deploy_to_instance(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_deploy_to_instance(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_deploy_to_instance(self, provider_hash, identity_hash, options):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('deploy_to_instance', TMessageType.CALL, self._seqid)
    args = deploy_to_instance_args()
    args.provider_hash = provider_hash
    args.identity_hash = identity_hash
    args.options = options
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_deploy_to_instance(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = deploy_to_instance_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return d.callback(result.success)
    if result.oex is not None:
      return d.errback(result.oex)
    if result.cex is not None:
      return d.errback(result.cex)
    if result.dex is not None:
      return d.errback(result.dex)
    return d.errback(TApplicationException(TApplicationException.MISSING_RESULT, "deploy_to_instance failed: unknown result"))

  def destroy_instance(self, provider_hash, identity_hash, instance_uuid):
    """
    Parameters:
     - provider_hash
     - identity_hash
     - instance_uuid
    """
    seqid = self._seqid = self._seqid + 1
    self._reqs[seqid] = defer.Deferred()

    d = defer.maybeDeferred(self.send_destroy_instance, provider_hash, identity_hash, instance_uuid)
    d.addCallbacks(
      callback=self.cb_send_destroy_instance,
      callbackArgs=(seqid,),
      errback=self.eb_send_destroy_instance,
      errbackArgs=(seqid,))
    return d

  def cb_send_destroy_instance(self, _, seqid):
    return self._reqs[seqid]

  def eb_send_destroy_instance(self, f, seqid):
    d = self._reqs.pop(seqid)
    d.errback(f)
    return d

  def send_destroy_instance(self, provider_hash, identity_hash, instance_uuid):
    oprot = self._oprot_factory.getProtocol(self._transport)
    oprot.writeMessageBegin('destroy_instance', TMessageType.CALL, self._seqid)
    args = destroy_instance_args()
    args.provider_hash = provider_hash
    args.identity_hash = identity_hash
    args.instance_uuid = instance_uuid
    args.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def recv_destroy_instance(self, iprot, mtype, rseqid):
    d = self._reqs.pop(rseqid)
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      return d.errback(x)
    result = destroy_instance_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.oex is not None:
      return d.errback(result.oex)
    if result.cex is not None:
      return d.errback(result.cex)
    return d.callback(None)


class Processor(TProcessor):
  implements(Iface)

  def __init__(self, handler):
    self._handler = Iface(handler)
    self._processMap = {}
    self._processMap["get_provider_hash"] = Processor.process_get_provider_hash
    self._processMap["get_identity_hash"] = Processor.process_get_identity_hash
    self._processMap["get_instance"] = Processor.process_get_instance
    self._processMap["list_instances"] = Processor.process_list_instances
    self._processMap["create_instance"] = Processor.process_create_instance
    self._processMap["deploy_to_instance"] = Processor.process_deploy_to_instance
    self._processMap["destroy_instance"] = Processor.process_destroy_instance

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return defer.succeed(None)
    else:
      return self._processMap[name](self, seqid, iprot, oprot)

  def process_get_provider_hash(self, seqid, iprot, oprot):
    args = get_provider_hash_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_provider_hash_result()
    d = defer.maybeDeferred(self._handler.get_provider_hash, args.provider)
    d.addCallback(self.write_results_success_get_provider_hash, result, seqid, oprot)
    return d

  def write_results_success_get_provider_hash(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_provider_hash", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_identity_hash(self, seqid, iprot, oprot):
    args = get_identity_hash_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_identity_hash_result()
    d = defer.maybeDeferred(self._handler.get_identity_hash, args.identity)
    d.addCallback(self.write_results_success_get_identity_hash, result, seqid, oprot)
    return d

  def write_results_success_get_identity_hash(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_identity_hash", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_instance(self, seqid, iprot, oprot):
    args = get_instance_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_instance_result()
    d = defer.maybeDeferred(self._handler.get_instance, args.provider_hash, args.identity_hash, args.instance_uuid)
    d.addCallback(self.write_results_success_get_instance, result, seqid, oprot)
    return d

  def write_results_success_get_instance(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("get_instance", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_list_instances(self, seqid, iprot, oprot):
    args = list_instances_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = list_instances_result()
    d = defer.maybeDeferred(self._handler.list_instances, args.provider_hash, args.identity_hash)
    d.addCallback(self.write_results_success_list_instances, result, seqid, oprot)
    d.addErrback(self.write_results_exception_list_instances, result, seqid, oprot)
    return d

  def write_results_success_list_instances(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("list_instances", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_list_instances(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except OpenStackException, oex:
      result.oex = oex
    except ConnectionException, cex:
      result.cex = cex
    oprot.writeMessageBegin("list_instances", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_create_instance(self, seqid, iprot, oprot):
    args = create_instance_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = create_instance_result()
    d = defer.maybeDeferred(self._handler.create_instance, args.provider_hash, args.identity_hash, args.options)
    d.addCallback(self.write_results_success_create_instance, result, seqid, oprot)
    return d

  def write_results_success_create_instance(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("create_instance", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deploy_to_instance(self, seqid, iprot, oprot):
    args = deploy_to_instance_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deploy_to_instance_result()
    d = defer.maybeDeferred(self._handler.deploy_to_instance, args.provider_hash, args.identity_hash, args.options)
    d.addCallback(self.write_results_success_deploy_to_instance, result, seqid, oprot)
    d.addErrback(self.write_results_exception_deploy_to_instance, result, seqid, oprot)
    return d

  def write_results_success_deploy_to_instance(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("deploy_to_instance", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_deploy_to_instance(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except OpenStackException, oex:
      result.oex = oex
    except ConnectionException, cex:
      result.cex = cex
    except DeployException, dex:
      result.dex = dex
    oprot.writeMessageBegin("deploy_to_instance", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_destroy_instance(self, seqid, iprot, oprot):
    args = destroy_instance_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = destroy_instance_result()
    d = defer.maybeDeferred(self._handler.destroy_instance, args.provider_hash, args.identity_hash, args.instance_uuid)
    d.addCallback(self.write_results_success_destroy_instance, result, seqid, oprot)
    d.addErrback(self.write_results_exception_destroy_instance, result, seqid, oprot)
    return d

  def write_results_success_destroy_instance(self, success, result, seqid, oprot):
    result.success = success
    oprot.writeMessageBegin("destroy_instance", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def write_results_exception_destroy_instance(self, error, result, seqid, oprot):
    try:
      error.raiseException()
    except OpenStackException, oex:
      result.oex = oex
    except ConnectionException, cex:
      result.cex = cex
    oprot.writeMessageBegin("destroy_instance", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class get_provider_hash_args:
  """
  Attributes:
   - provider
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'provider', (Provider, Provider.thrift_spec), None, ), # 1
  )

  def __init__(self, provider=None,):
    self.provider = provider

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.provider = Provider()
          self.provider.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_provider_hash_args')
    if self.provider is not None:
      oprot.writeFieldBegin('provider', TType.STRUCT, 1)
      self.provider.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_provider_hash_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_provider_hash_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_identity_hash_args:
  """
  Attributes:
   - identity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'identity', (Identity, Identity.thrift_spec), None, ), # 1
  )

  def __init__(self, identity=None,):
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.identity = Identity()
          self.identity.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_identity_hash_args')
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRUCT, 1)
      self.identity.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_identity_hash_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_identity_hash_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_instance_args:
  """
  Attributes:
   - provider_hash
   - identity_hash
   - instance_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'provider_hash', None, None, ), # 1
    (2, TType.STRING, 'identity_hash', None, None, ), # 2
    (3, TType.STRING, 'instance_uuid', None, None, ), # 3
  )

  def __init__(self, provider_hash=None, identity_hash=None, instance_uuid=None,):
    self.provider_hash = provider_hash
    self.identity_hash = identity_hash
    self.instance_uuid = instance_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.provider_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.identity_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.instance_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_instance_args')
    if self.provider_hash is not None:
      oprot.writeFieldBegin('provider_hash', TType.STRING, 1)
      oprot.writeString(self.provider_hash)
      oprot.writeFieldEnd()
    if self.identity_hash is not None:
      oprot.writeFieldBegin('identity_hash', TType.STRING, 2)
      oprot.writeString(self.identity_hash)
      oprot.writeFieldEnd()
    if self.instance_uuid is not None:
      oprot.writeFieldBegin('instance_uuid', TType.STRING, 3)
      oprot.writeString(self.instance_uuid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider_hash)
    value = (value * 31) ^ hash(self.identity_hash)
    value = (value * 31) ^ hash(self.instance_uuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_instance_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Instance, Instance.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Instance()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_instance_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class list_instances_args:
  """
  Attributes:
   - provider_hash
   - identity_hash
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'provider_hash', None, None, ), # 1
    (2, TType.STRING, 'identity_hash', None, None, ), # 2
  )

  def __init__(self, provider_hash=None, identity_hash=None,):
    self.provider_hash = provider_hash
    self.identity_hash = identity_hash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.provider_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.identity_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('list_instances_args')
    if self.provider_hash is not None:
      oprot.writeFieldBegin('provider_hash', TType.STRING, 1)
      oprot.writeString(self.provider_hash)
      oprot.writeFieldEnd()
    if self.identity_hash is not None:
      oprot.writeFieldBegin('identity_hash', TType.STRING, 2)
      oprot.writeString(self.identity_hash)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider_hash)
    value = (value * 31) ^ hash(self.identity_hash)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class list_instances_result:
  """
  Attributes:
   - success
   - oex
   - cex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Instances, Instances.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'oex', (OpenStackException, OpenStackException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cex', (ConnectionException, ConnectionException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, oex=None, cex=None,):
    self.success = success
    self.oex = oex
    self.cex = cex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Instances()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.oex = OpenStackException()
          self.oex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cex = ConnectionException()
          self.cex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('list_instances_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.oex is not None:
      oprot.writeFieldBegin('oex', TType.STRUCT, 1)
      self.oex.write(oprot)
      oprot.writeFieldEnd()
    if self.cex is not None:
      oprot.writeFieldBegin('cex', TType.STRUCT, 2)
      self.cex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.oex)
    value = (value * 31) ^ hash(self.cex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class create_instance_args:
  """
  Attributes:
   - provider_hash
   - identity_hash
   - options
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'provider_hash', None, None, ), # 1
    (2, TType.STRING, 'identity_hash', None, None, ), # 2
    (3, TType.MAP, 'options', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, provider_hash=None, identity_hash=None, options=None,):
    self.provider_hash = provider_hash
    self.identity_hash = identity_hash
    self.options = options

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.provider_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.identity_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.options = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin()
          for _i43 in xrange(_size39):
            _key44 = iprot.readString();
            _val45 = iprot.readString();
            self.options[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('create_instance_args')
    if self.provider_hash is not None:
      oprot.writeFieldBegin('provider_hash', TType.STRING, 1)
      oprot.writeString(self.provider_hash)
      oprot.writeFieldEnd()
    if self.identity_hash is not None:
      oprot.writeFieldBegin('identity_hash', TType.STRING, 2)
      oprot.writeString(self.identity_hash)
      oprot.writeFieldEnd()
    if self.options is not None:
      oprot.writeFieldBegin('options', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.options))
      for kiter46,viter47 in self.options.items():
        oprot.writeString(kiter46)
        oprot.writeString(viter47)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider_hash)
    value = (value * 31) ^ hash(self.identity_hash)
    value = (value * 31) ^ hash(self.options)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class create_instance_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Instance, Instance.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Instance()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('create_instance_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deploy_to_instance_args:
  """
  Attributes:
   - provider_hash
   - identity_hash
   - options
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'provider_hash', None, None, ), # 1
    (2, TType.STRING, 'identity_hash', None, None, ), # 2
    (3, TType.MAP, 'options', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, provider_hash=None, identity_hash=None, options=None,):
    self.provider_hash = provider_hash
    self.identity_hash = identity_hash
    self.options = options

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.provider_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.identity_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.options = {}
          (_ktype49, _vtype50, _size48 ) = iprot.readMapBegin()
          for _i52 in xrange(_size48):
            _key53 = iprot.readString();
            _val54 = iprot.readString();
            self.options[_key53] = _val54
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deploy_to_instance_args')
    if self.provider_hash is not None:
      oprot.writeFieldBegin('provider_hash', TType.STRING, 1)
      oprot.writeString(self.provider_hash)
      oprot.writeFieldEnd()
    if self.identity_hash is not None:
      oprot.writeFieldBegin('identity_hash', TType.STRING, 2)
      oprot.writeString(self.identity_hash)
      oprot.writeFieldEnd()
    if self.options is not None:
      oprot.writeFieldBegin('options', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.options))
      for kiter55,viter56 in self.options.items():
        oprot.writeString(kiter55)
        oprot.writeString(viter56)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider_hash)
    value = (value * 31) ^ hash(self.identity_hash)
    value = (value * 31) ^ hash(self.options)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deploy_to_instance_result:
  """
  Attributes:
   - success
   - oex
   - cex
   - dex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'oex', (OpenStackException, OpenStackException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cex', (ConnectionException, ConnectionException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'dex', (DeployException, DeployException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, oex=None, cex=None, dex=None,):
    self.success = success
    self.oex = oex
    self.cex = cex
    self.dex = dex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.oex = OpenStackException()
          self.oex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cex = ConnectionException()
          self.cex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.dex = DeployException()
          self.dex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deploy_to_instance_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.oex is not None:
      oprot.writeFieldBegin('oex', TType.STRUCT, 1)
      self.oex.write(oprot)
      oprot.writeFieldEnd()
    if self.cex is not None:
      oprot.writeFieldBegin('cex', TType.STRUCT, 2)
      self.cex.write(oprot)
      oprot.writeFieldEnd()
    if self.dex is not None:
      oprot.writeFieldBegin('dex', TType.STRUCT, 3)
      self.dex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.oex)
    value = (value * 31) ^ hash(self.cex)
    value = (value * 31) ^ hash(self.dex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class destroy_instance_args:
  """
  Attributes:
   - provider_hash
   - identity_hash
   - instance_uuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'provider_hash', None, None, ), # 1
    (2, TType.STRING, 'identity_hash', None, None, ), # 2
    (3, TType.STRING, 'instance_uuid', None, None, ), # 3
  )

  def __init__(self, provider_hash=None, identity_hash=None, instance_uuid=None,):
    self.provider_hash = provider_hash
    self.identity_hash = identity_hash
    self.instance_uuid = instance_uuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.provider_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.identity_hash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.instance_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('destroy_instance_args')
    if self.provider_hash is not None:
      oprot.writeFieldBegin('provider_hash', TType.STRING, 1)
      oprot.writeString(self.provider_hash)
      oprot.writeFieldEnd()
    if self.identity_hash is not None:
      oprot.writeFieldBegin('identity_hash', TType.STRING, 2)
      oprot.writeString(self.identity_hash)
      oprot.writeFieldEnd()
    if self.instance_uuid is not None:
      oprot.writeFieldBegin('instance_uuid', TType.STRING, 3)
      oprot.writeString(self.instance_uuid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.provider_hash)
    value = (value * 31) ^ hash(self.identity_hash)
    value = (value * 31) ^ hash(self.instance_uuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class destroy_instance_result:
  """
  Attributes:
   - oex
   - cex
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'oex', (OpenStackException, OpenStackException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'cex', (ConnectionException, ConnectionException.thrift_spec), None, ), # 2
  )

  def __init__(self, oex=None, cex=None,):
    self.oex = oex
    self.cex = cex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.oex = OpenStackException()
          self.oex.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.cex = ConnectionException()
          self.cex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('destroy_instance_result')
    if self.oex is not None:
      oprot.writeFieldBegin('oex', TType.STRUCT, 1)
      self.oex.write(oprot)
      oprot.writeFieldEnd()
    if self.cex is not None:
      oprot.writeFieldBegin('cex', TType.STRUCT, 2)
      self.cex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.oex)
    value = (value * 31) ^ hash(self.cex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
