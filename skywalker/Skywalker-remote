#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted,new_style,utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from skywalker import Skywalker
from skywalker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string get_provider_hash(Provider provider)')
  print('  string get_identity_hash(Identity identity)')
  print('  Instance get_instance(string provider_hash, string identity_hash, string instance_uuid)')
  print('  Instances list_instances(string provider_hash, string identity_hash)')
  print('  Instance create_instance(string provider_hash, string identity_hash, Options options)')
  print('  bool deploy_to_instance(string provider_hash, string identity_hash, Options options)')
  print('  void destroy_instance(string provider_hash, string identity_hash, string instance_uuid)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Skywalker.Client(protocol)
transport.open()

if cmd == 'get_provider_hash':
  if len(args) != 1:
    print('get_provider_hash requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_provider_hash(eval(args[0]),))

elif cmd == 'get_identity_hash':
  if len(args) != 1:
    print('get_identity_hash requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_identity_hash(eval(args[0]),))

elif cmd == 'get_instance':
  if len(args) != 3:
    print('get_instance requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_instance(args[0],args[1],args[2],))

elif cmd == 'list_instances':
  if len(args) != 2:
    print('list_instances requires 2 args')
    sys.exit(1)
  pp.pprint(client.list_instances(args[0],args[1],))

elif cmd == 'create_instance':
  if len(args) != 3:
    print('create_instance requires 3 args')
    sys.exit(1)
  pp.pprint(client.create_instance(args[0],args[1],eval(args[2]),))

elif cmd == 'deploy_to_instance':
  if len(args) != 3:
    print('deploy_to_instance requires 3 args')
    sys.exit(1)
  pp.pprint(client.deploy_to_instance(args[0],args[1],eval(args[2]),))

elif cmd == 'destroy_instance':
  if len(args) != 3:
    print('destroy_instance requires 3 args')
    sys.exit(1)
  pp.pprint(client.destroy_instance(args[0],args[1],args[2],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
